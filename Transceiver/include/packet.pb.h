/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_PACKET_PB_H_INCLUDED
#define PB_PACKET_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _PacketType {
    PacketType_UNSPECIFIED = 0,
    PacketType_SETTINGS = 1,
    PacketType_TRANSMISSION = 2
} PacketType;

typedef enum _FuncState {
    FuncState_TRANSMITTER = 0,
    FuncState_RECEIVER = 1
} FuncState;

/* Struct definitions */
typedef struct _Settings {
    float frequency;
    int32_t power;
    float bandwidth;
    int32_t spreading_factor;
    int32_t coding_rate;
    int32_t preamble;
    bool set_crc;
    uint32_t sync_word;
    bool func_state;
} Settings;

typedef PB_BYTES_ARRAY_T(255) Transmission_payload_t;
typedef struct _Transmission {
    Transmission_payload_t payload;
} Transmission;

typedef PB_BYTES_ARRAY_T(255) Received_payload_t;
typedef struct _Received {
    bool crc_error;
    bool general_error;
    double latitude;
    double longitude;
    uint32_t sattelites;
    float rssi;
    float snr;
    Received_payload_t payload;
} Received;

typedef struct _Packet {
    PacketType type;
    bool has_settings;
    Settings settings;
    bool has_transmission;
    Transmission transmission;
    bool has_received;
    Received received;
} Packet;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _PacketType_MIN PacketType_UNSPECIFIED
#define _PacketType_MAX PacketType_TRANSMISSION
#define _PacketType_ARRAYSIZE ((PacketType)(PacketType_TRANSMISSION+1))

#define _FuncState_MIN FuncState_TRANSMITTER
#define _FuncState_MAX FuncState_RECEIVER
#define _FuncState_ARRAYSIZE ((FuncState)(FuncState_RECEIVER+1))




#define Packet_type_ENUMTYPE PacketType


/* Initializer values for message structs */
#define Settings_init_default                    {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Transmission_init_default                {{0, {0}}}
#define Received_init_default                    {0, 0, 0, 0, 0, 0, 0, {0, {0}}}
#define Packet_init_default                      {_PacketType_MIN, false, Settings_init_default, false, Transmission_init_default, false, Received_init_default}
#define Settings_init_zero                       {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Transmission_init_zero                   {{0, {0}}}
#define Received_init_zero                       {0, 0, 0, 0, 0, 0, 0, {0, {0}}}
#define Packet_init_zero                         {_PacketType_MIN, false, Settings_init_zero, false, Transmission_init_zero, false, Received_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Settings_frequency_tag                   1
#define Settings_power_tag                       2
#define Settings_bandwidth_tag                   3
#define Settings_spreading_factor_tag            4
#define Settings_coding_rate_tag                 5
#define Settings_preamble_tag                    6
#define Settings_set_crc_tag                     7
#define Settings_sync_word_tag                   8
#define Settings_func_state_tag                  9
#define Transmission_payload_tag                 1
#define Received_crc_error_tag                   1
#define Received_general_error_tag               2
#define Received_latitude_tag                    3
#define Received_longitude_tag                   4
#define Received_sattelites_tag                  5
#define Received_rssi_tag                        6
#define Received_snr_tag                         7
#define Received_payload_tag                     8
#define Packet_type_tag                          1
#define Packet_settings_tag                      2
#define Packet_transmission_tag                  3
#define Packet_received_tag                      4

/* Struct field encoding specification for nanopb */
#define Settings_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    frequency,         1) \
X(a, STATIC,   SINGULAR, INT32,    power,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    bandwidth,         3) \
X(a, STATIC,   SINGULAR, INT32,    spreading_factor,   4) \
X(a, STATIC,   SINGULAR, INT32,    coding_rate,       5) \
X(a, STATIC,   SINGULAR, INT32,    preamble,          6) \
X(a, STATIC,   SINGULAR, BOOL,     set_crc,           7) \
X(a, STATIC,   SINGULAR, UINT32,   sync_word,         8) \
X(a, STATIC,   SINGULAR, BOOL,     func_state,        9)
#define Settings_CALLBACK NULL
#define Settings_DEFAULT NULL

#define Transmission_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    payload,           1)
#define Transmission_CALLBACK NULL
#define Transmission_DEFAULT NULL

#define Received_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     crc_error,         1) \
X(a, STATIC,   SINGULAR, BOOL,     general_error,     2) \
X(a, STATIC,   SINGULAR, DOUBLE,   latitude,          3) \
X(a, STATIC,   SINGULAR, DOUBLE,   longitude,         4) \
X(a, STATIC,   SINGULAR, UINT32,   sattelites,        5) \
X(a, STATIC,   SINGULAR, FLOAT,    rssi,              6) \
X(a, STATIC,   SINGULAR, FLOAT,    snr,               7) \
X(a, STATIC,   SINGULAR, BYTES,    payload,           8)
#define Received_CALLBACK NULL
#define Received_DEFAULT NULL

#define Packet_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  settings,          2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transmission,      3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  received,          4)
#define Packet_CALLBACK NULL
#define Packet_DEFAULT NULL
#define Packet_settings_MSGTYPE Settings
#define Packet_transmission_MSGTYPE Transmission
#define Packet_received_MSGTYPE Received

extern const pb_msgdesc_t Settings_msg;
extern const pb_msgdesc_t Transmission_msg;
extern const pb_msgdesc_t Received_msg;
extern const pb_msgdesc_t Packet_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Settings_fields &Settings_msg
#define Transmission_fields &Transmission_msg
#define Received_fields &Received_msg
#define Packet_fields &Packet_msg

/* Maximum encoded size of messages (where known) */
#define PACKET_PB_H_MAX_SIZE                     Packet_size
#define Packet_size                              628
#define Received_size                            296
#define Settings_size                            64
#define Transmission_size                        258

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
